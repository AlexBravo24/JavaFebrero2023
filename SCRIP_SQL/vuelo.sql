--ejercicio de la areolinea

--creando entidades fuertes

CREATE TABLE BASES(
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2(20)
);
--CREAMOS LA SECUENCIA PARA LA TABLA DE BASES
CREATE SEQUENCE BASES_SEQ;
--CREAMOS EL DISPARADOR PARA LA TABLA BASES
CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

-- CREAR TABLA LISTAS_CLIENTES
CREATE TABLE CLIENTES_VUELO(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO  NVARCHAR2(10),
EMAIL NVARCHAR2(30)
); 

CREATE SEQUENCE CLIENTES_SEQ;

CREATE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES_VUELO FOR EACH ROW BEGIN
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

-- CREANDO ENTIDADES DEBILES

CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVUELO NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;

CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;


CREATE TABLE AVIONES(
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (2))
); 

CREATE SEQUENCE AVIONES_SEQ;


CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

CREATE TABLE VUELOS(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORAFECHA DATE,
ID_PILOTO NUMBER,
ID_AVION NUMBER,
CONSTRAINT FK_IDPILOTO_VUELOS
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS (ID_PILOTO),
CONSTRAINT FK_IDAVION_VUELOS
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES(ID_AVION)
); 

CREATE SEQUENCE VUELOS_SEQ;


CREATE TRIGGER INSERT_VUELOS
BEFORE INSERT ON VUELOS FOR EACH ROW BEGIN
SELECT VUELOS_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

----------------------------------
CREATE TABLE TRIPULACION_VUELO(
ID_TV NUMBER PRIMARY KEY,
ID_TRIPULACION NUMBER,
ID_VUELO NUMBER,
CONSTRAINT FK_IDTRIPULACION_TV
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION (ID_TRIPULACION),
CONSTRAINT FK_IDVUELO_TV
FOREIGN KEY (ID_VUELO)
REFERENCES VUELOS (ID_VUELO)
);

CREATE SEQUENCE TV_SEQ;

CREATE TRIGGER INSERT_TV
BEFORE INSERT ON TRIPULACION_VUELO FOR EACH ROW BEGIN
SELECT TV_SEQ.NEXTVAL INTO:NEW.ID_TV FROM DUAL;
END;
------------------
CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (8,2),
CONSTRAINT FK_IDVUEELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELOS (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTES_VUELO (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

--INSERCIONES DE REGISTROS, COMENZANDO POR LAS ENTIDADES FUERTES

INSERT INTO BASES (ID_BASE,TIPO) VALUES (1,'DESCANSO');
INSERT INTO BASES (ID_BASE,TIPO) VALUES (2,'MANTENIMIENTO');

SELECT * FROM BASES;

----INSERT DE REGISTROS DE CLIENTES
DESCRIBE CLIENTES_VUELO;

INSERT ALL
INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL)VALUES
('ZAHID','EDOMEX','5535750876','LDKASCJK')
INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL)VALUES
('MARIO','ZACATECAS','5535750876','LDKASCJK')
INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL)VALUES
('GABRIELA','VERACRUZ','5535750876','CDKJN')
INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL)VALUES
('ARON','PUEBLA','5535750876','CDKJN')
INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL)VALUES
('LUIS','MICHOACAN','5535750876','CDKJN')

SELECT *FROM DUAL;

SELECT *FROM CLIENTES_VUELO;

---INSERCION DE REGISTROS DE PILOTOS

DESCRIBE PILOTOS;
INSERT ALL
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE)VALUES
('GERARDO',1200,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE)VALUES
('CESAR',700,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE)VALUES
('PEDRO',450,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE)VALUES
('JUAN',1400,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE)VALUES
('GUSTAVO',300,1)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;

--ACTUALIZA UN REGISTRO INDIVIDUAL

UPDATE PILOTOS SET NOMBRE ='ALBERTO' WHERE ID_PILOTO=5;

SELECT *FROM PILOTOS;
-----------------------------
--INSERCION DE DATOS EN LA TABLA DE TRIPULACION 
DESCRIBE TRIPULACION;
INSERT ALL 
INTO TRIPULACION (NOMBRE,ID_BASE)VALUES('EDUARDO',1)
INTO TRIPULACION (NOMBRE,ID_BASE)VALUES('CAROLINA',1)
INTO TRIPULACION (NOMBRE,ID_BASE)VALUES('STEFANY',1)
INTO TRIPULACION (NOMBRE,ID_BASE)VALUES('JUAN',1)
INTO TRIPULACION (NOMBRE,ID_BASE)VALUES('ANDRES',1)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

----INSERCION DE REGISTROS DE AVIONES

INSERT ALL
INTO AVIONES(MODELO, ID_BASE) VALUES ('BOEING-1900',2)
INTO AVIONES(MODELO, ID_BASE) VALUES ('FALCON',2)
INTO AVIONES(MODELO, ID_BASE) VALUES ('BOEING-2000',2)
INTO AVIONES(MODELO, ID_BASE) VALUES ('BANCHI',2)
INTO AVIONES(MODELO, ID_BASE) VALUES ('PELICAN',2)
SELECT * FROM DUAL;

SELECT *FROM AVIONES;
--CONFIRMAMOS CAMBIOS EN LOS REGISTROS

COMMIT;

--INSERCION DE REGISTROS EN VUELOS 
DESCRIBE VUELOS;
INSERT ALL
INTO VUELOS (ORIGEN,DESTINO,HORAFECHA,ID_PILOTO,ID_AVION)VALUES
('VIENNA','TOKYO', TO_DATE('2/03/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,2)
INTO VUELOS (ORIGEN,DESTINO,HORAFECHA,ID_PILOTO,ID_AVION)VALUES
('PARIS','EGIPTO', TO_DATE('3/03/2023 17:30:00','DD-MM-YYYY HH24:MI:SS'),2,3)
INTO VUELOS (ORIGEN,DESTINO,HORAFECHA,ID_PILOTO,ID_AVION)VALUES
('VIENNA','TOKYO', TO_DATE('4/03/2023 18:30:00','DD-MM-YYYY HH24:MI:SS'),4,1)
INTO VUELOS (ORIGEN,DESTINO,HORAFECHA,ID_PILOTO,ID_AVION)VALUES
('PARIS','EGIPTO', TO_DATE('5/03/2023 20:30:00','DD-MM-YYYY HH24:MI:SS'),3,5)
INTO VUELOS (ORIGEN,DESTINO,HORAFECHA,ID_PILOTO,ID_AVION)VALUES
('MEXICO','ARABIA', TO_DATE('6/03/2023 23:30:00','DD-MM-YYYY HH24:MI:SS'),3,5)
 
SELECT * FROM DUAL;
SELECT * FROM VUELOS;
--COMMIT;--GUARDA REGISTROS


--INSERCION DE REGISTROS DE TRIPULACION_VUELO

DESCRIBE TRIPULACION_VUELO;

INSERT ALL
INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO)VALUES(1,5)
INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO)VALUES(2,3)
INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO)VALUES(3,1)
INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO)VALUES(4,4)
INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO)VALUES(5,2)
SELECT * FROM DUAL;


SELECT * FROM TRIPULACION_VUELO;

--INSERCION DE REGISTROS DE  BOLETOS
DESCRIBE BOLETOS;

INSERT ALL
INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO)VALUES(1,2,25000)
INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO)VALUES(3,4,5000)
INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO)VALUES(5,1,35000)
INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO)VALUES(2,5,50000)
INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO)VALUES(4,3,125000)
SELECT * FROM DUAL;
COMMIT;
DESCRIBE BOLETOS;
UPDATE BOLETOS SET COSTO = 80000.99 WHERE ID_BOLETO=4;

SELECT * FROM BOLETOS;

INSERT INTO TRIPULACION(NOMBRE,ID_BASE)VALUES('MANUEL',1);
SELECT * FROM TRIPULACION;
--REVERTIR LA INSERCION DE DATOS
--NOS LLEVA AL DESTINO DEL ULTIMO COMIT

ROLLBACK;

DELETE FROM TRIPULACION WHERE ID_TRIPULACION=9;

DELETE FROM TRIPULACION WHERE NOMBRE='MANUEL';

SELECT * FROM PILOTOS;
--REALIZA UNA CONSULTA DE COLUMNAS ESPECIFICAS DE UNA TABLA 
SELECT NOMBRE,ID_PILOTO FROM PILOTOS;
-- CONSULTA CON DETERMINADA CONDICION 
SELECT NOMBRE,HORASVUELO FROM PILOTOS WHERE HORASVUELO>700;

--CONSULTA DATOS CON MAS DE UNA CONDICION CONCAATENANDO CON "AND"
SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO<700 AND NOMBRE='JUAN';

--CONSULTAR DATOS PARA BUSCAR RANGOS MEDIANTE "BETWEEN"

SELECT * FROM PILOTOS WHERE HORASVUELO BETWEEN 400 AND 1200;

--CONSULTANDO VALORES SIMILIARES (NOMBRE)
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'E%';
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';
SELECT * FROM PILOTOS;

--FUNCIONES DE AGREGACION 

SELECT MAX (HORASVUELO) FROM PILOTOS;
SELECT MIN (HORASVUELO) FROM PILOTOS;
-- BUSCAR AL PILOTO CON MAS HORAS DE VUELO
SELECT * FROM PILOTOS WHERE HORASVUELO =(SELECT MAX (HORASVUELO)FROM PILOTOS);

COMMIT;

--ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVUELO=NULL;--ACTUALIZAR LOS VALORES A NULOS/ VACIO
SELECT * FROM PILOTOS; --CONSULTAMOS QUE LOS CAMBIOS SE HAYAN REALIZADO
ROLLBACK;
--REALIZA UN CONTEO DE LAS FILAS O REGISTROS PARA DETERMINADOS DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVUELO>700;
--obtenemos el promedio de los valores de una columna 
SELECT AVG (HORASVUELO) FROM PILOTOS;

SELECT SUM(HORASVUELO) FROM PILOTOS;

--FUNCIONES GROIP BY 
--MOSTRAR CUANTOS ALUMNOS HAY POR GENERO

--SELECT COUNT (ID_ALUMNO),SEXO FROM ALUMNO GROUP BY SEXO;

--ORDENAR REGISTROS PARA MOSTRAR EN ORDEN DECENDENTES
--SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;
--ORENARS REGISTROS PARA MOSTRARLOS EN ORDEN ASCENDENTES
--SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

-- JOINS

--INNER JOIN INTERSECCION DE 2 CONJUNTOS

--FORMA EXPLICITA
--



SELECT * FROM PILOTOS --TABLA A
INNER JOIN BASES -- TABLA B  UNION
ON PILOTOS.ID_BASE = BASES.ID_BASE; --COMPARACION


SELECT * FROM PILOTOS --TABLA A
JOIN BASES -- TABLA B  UNION
ON PILOTOS.ID_BASE = BASES.ID_BASE; --COMPARACION

--TOMAR ALIAS DE LAS TABLAS 

SELECT * FROM PILOTOS --TABLA A
JOIN BASES -- TABLA B  UNION
ON PILOTOS.ID_BASE = BASES.ID_BASE; --COMPARACION

SELECT * FROM PILOTOS P
INNER JOIN BASES B 
ON P.ID_BASE = B.ID_BASE;

--------------------------------------
SELECT * FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

--------------------------
SELECT * FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

--------------------------
SELECT * FROM BASES
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;
--------------------------

SELECT AVIONES.ID_AVION,AVIONES.MODELO,VUELOS.DESTINO FROM PILOTOS
INNER JOIN VUELOS
ON VUELOS.ID_PILOTO=PILOTOS.ID_PILOTO
INNER JOIN AVIONES
ON AVIONES.ID_AVION=VUELOS.ID_AVION
WHERE PILOTOS.HORASVUELO= (SELECT MIN (HORASVUELO) FROM PILOTOS);





