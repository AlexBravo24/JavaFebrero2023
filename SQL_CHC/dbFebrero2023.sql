-- Con dos guiones puedo poner un comentario 

/* Podemos poner comentarios de multiples líneas 
SQL - Lenguaje de consulta estructurada (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en 
bases de datos relacionales.

BASE DE DATOS; Conjunto de datos organizados y relacionados entre sí.
y que son almacenados en tablas.
*/

/*La estructura de las tablas queda de la siguientne manera:
Toda tabla debe llevar una llave primaria 
(ID o número que identifique cada registro de la misma)
Pueden llevar también llaves foraneas
Una llave foreanea es la llave primaria que proviene de otra tabla
Tipo de dato- pueden ser numéricos, caracteres, tipo fecha, etc.

Caracter- Char, Varchar, Varchar2, Nchar, NVARCHAR2 
Numericos- long, int, NUMBER
*/




--CREAR UNA TABLA DE EJEMPLO
--ALMACENAR DATOS DE UNA PERSONA

--ID DE LA PERSONA
--NOMBRE
--EDAD
--SEXO


--Creando la tabla para persona 
--La Sintaxis para crear una tabla es la siguiente:
--CREATE TABLE NOMBREDELATABLA (
--NOMBRECAMPO1 TIPODEDATO
--);


CREATE TABLE PERSONA (
INE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(20),
EDAD NUMBER,
SEXO NVARCHAR2(1)
);

--PARA VER LA ESTRUCTURA DE UNA TABLA UTILIZAMOS LA SIGUIENTE 
DESCRIBE PERSONA;

--Hay que establecer valores que no cambien, como en este caso
--la edad.
--Lo ideal sería cambiar el tipo de dato por DATE


--ELIMINAR UNA TABLA 
DROP TABLE PERSONA;

--CREAR UNA TABLA DE ALUMNOS
--MATRICULA
--FECHA DE NACIMIENTO
--SEXO
--SEMESTRE
--STATUS 

--Crear la tabla ALUMNO
CREATE TABLE ALUMNO (
ID_ALUMNO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
FECHANAC DATE, 
SEXO NVARCHAR2 (20),
SEMESTRE NVARCHAR2(30),
STATUS NUMBER 
);
DROP TABLE ALUMNO;

--CREAR UNA TABLA DE CARRERAS UNIVERSITARIAS
CREATE TABLE CARRERAS (
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DURACIONSEM NUMBER,
AREA NVARCHAR2(30),
CREDITOS NUMBER
);

--Entidades Fuertes- No dependen de otras para existir (Tiene
--sus datos completos)
--Entidades debiles -DEpenden de otra tabla u otros datos
--para existir. Se identifican facilmente porque reciben una 
--foranea 


--Creamos una tabla que nos permita relacionar a los alumnos
--con sus respectivas carreras

CREATE TABLE CARRERAS_ALUMNOS (
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER
);

--AGREGANDO RESTRICCIONES A UNA TABLA
--Las restricciones deben llevar un nombre y se identifican por 
--la palabra 'CONSTRAINT'

--Como ejemplo vamos a agregar una restricción en el sexo en la tabla alumno
--para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO
CHECK (SEXO IN ('MASCULINO','FEMENINO'));


--PARA GUARDAR EL SCRIP 
--UTILIZAR CTRL + S 

--BORRAR O ELIMINAR UNA RESTRICCIÓN DE LA TABLA
ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_SEXO;


--CREAR OTRA RESTRICCIÓN EN LA TABLA CARRERAS
--PARA NO REPETIR VALORES
--UNIQUE, Para agregar una restricción única en un registro

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRRERA
UNIQUE (NOMBRE);
---AGREGANDO UNA LLAVE FORANEA
--una llave foranea también es una restricción
--vamos a especificar de donde proviene dicha llave 


--Sintaxis general
--ALTER TABLE NOMBREDELATABLA ADD CONSTRAINT NOMBREDELARESTRICCION
--FOREINGKEY (COLUMNA QUE RECIBE)--QUIEN RECIBE
--REFERENCES NOMBREDELATABLA  (COLUMNA CON LLAVE PRIMARIA); --QUIEN DA

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO 
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

--CREAR LA LLAVE FORANEA ID CARRERA 
ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA)
REFERENCES CARRERAS (ID_CARRERA);

DESCRIBE CARRERAS_ALUMNOS;
ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER;
--AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DURACIONSEM NUMBER,
AREA NVARCHAR2 (30),
CREDITOS NUMBER
);



ALTER TABLE CARRERAS ADD PRESUPUESTO NUMBER (6,2);

--ELIMINAR COLUMNA DE UNA TABLE EXISTENTE 
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO;
ALTER TABLE CARRERAS DROP COLUMN PRESUPUESTO NUMBER(6,2);

--Podemos indicar el uso de decinales, indicando la longitud numérica
--y separamos con una coma, cuantas posiciones serían decimales
--quedando en el ejemplo anterior un valor maximo entero de 9,99
--y un decimal de .99

--RENOMBRAR UNA COLUMNA
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO TO PRESUPUESTO_MENSUAL;

DESCRIBE CARRERAS;
--MODIFICAR EL TIPO DE DATO DE LA COLUMNA (SIEMPRE Y CUANDO
--DATOS INSERTADOS 

ALTER TABLE CARRERAS MODIFY PRSESUPUESTO_MENSUAL NVACHAR2(10);

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_MENSUAL NUMBER (6,2);


--INSERCION DE DATOS INDIVIDUALES
DESCRIBE ALUMNO;
INSERT INTO ALUMNO VALUES
(1,'Eduardo','13/10/1990','MASCULINO','8o SEMESTRE', 1);
INSERT INTO ALUMNO VALUES
(2,'Stephany','23/10/1997','FEMENINO','8o SEMESTRE', 1);
INSERT INTO ALUMNO VALUES
(3,'JUAN','10/10/1997','MASCULINO','8o SEMESTRE', 1);
INSERT INTO ALUMNO VALUES
(4,'LUIS','04/01/1998','MASCULINO','8o SEMESTRE', 1);
INSERT INTO ALUMNO VALUES
(5,'GABRIELA','13/10/1990','FEMENINO','8o SEMESTRE',1);

DROP TABLE CARRERAS_ALUMNOS;

----------------------------------------------------------------
--REALIZANDO UNA CONSULTA GENERAL DE LOS DATOS INGRESADOS
--EN UNA TABLA 

SELECT * FROM ALUMNO;

--PARA CONFIRMAR CAMBIOS DE LOS REGISTROS QUE INSERTAMOS
--(GUARDAR)

COMMIT;

--BORRAR UN REGISTRO ESPECIFICANDO UN CAMPO A COINCIDIR
--CON EL REGISTRO 

DELETE FROM ALUMNO WHERE ID_ALUMNO=5;


DESCRIBE CARRERAS;
INSERT INTO CARRERAS VALUES
(1,'ING EN SISTEMAS',8,'EXACTAS',400,9000);
INSERT INTO CARRERAS VALUES
(2,'MEDICINA',10,'BIOLOGICO',400,9500);
INSERT INTO CARRERAS VALUES
(3,'NUTRICION',8,'BIOLOGICOS',350,8000);
INSERT INTO CARRERAS VALUES
(4,'MERCADOTECNIA',8,'ADMINISTRTIVA',400,1000);
INSERT INTO CARRERAS VALUES
(5,'MECATRONICA',10,'EXACTAS',400,8000);

--INSERTAR DATOS EN NUESTRA TABLA RELACIONAL
DESCRIBE CARRERAS_ALUMNOS;
INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,3,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,5,3);


SELECT * FROM ALUMNO;
SELECT*FROM CARRERAS;

--EJERCICIO 
--CREAR UNA TABLA LLAMADA TUTORES 
--ID DEL TUTOR, NOMBRE, SEXO, TELEFONO, CLAVE DEL TUTOR
--RESTRICCION EN LA CLAVE DEL TUTOR (A,B,C,D)
--INSERTAR 5 REGISTROS
--PARA CREAR TABLA LLAMADA TUTORES
CREATE TABLE TUTORES (
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(20),
SEXO NVARCHAR2(1),
TELEFONO NVARCHAR2(10),
CLAVE NVARCHAR2(1)
);
DESCRIBE TUTORES; --PARA VER LA TABLA EN CONSOLA
DROP TABLE TUTORES; --ELIMINÉ LA TABLA POR CAMBIO DE TIPO DE DATOS
--PARA LA RESTRICCION:
ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE
CHECK (CLAVE IN ('A','B','C','D'));
--PARA INSERTAR VALORES EN LA TABLA TUTORES
DESCRIBE TUTORES;
INSERT INTO TUTORES VALUES
(1,'SAUL','M',2212047567,'A');
INSERT INTO TUTORES VALUES
(2,'IRI','F',2225086885,'B');
INSERT INTO TUTORES VALUES
(3,'ALBERTO','M',2223908712,'C');
INSERT INTO TUTORES VALUES
(4,'DIEGO','M',2212047567,'D');
INSERT INTO TUTORES VALUES
(5,'CAMILA','F',2212047567,'A');
SELECT * FROM TUTORES;

--CREAR TABLA RELACIONAL ALUMNO_TUTORES
--ID DE LA TABLA 
--ID_ALUMNO (LLAVE FORANEA)
--ID_TUTOR (LLAVE FORANEA)
--INSERTAR 5 REGISTROS 

CREATE TABLE ALUMNO_TUTORES (
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

ALTER TABLE ALUMNO_TUTORES ADD CONSTRAINT FK_IDALUMNOS
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

--CREAR LA LLAVE FORANEA ID TUTOR
ALTER TABLE ALUMNO_TUTORES ADD CONSTRAINT FK_IDTUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES(ID_TUTOR);

SELECT * FROM ALUMNO;
--INSERTAR 5 REGISTROS 
DESCRIBE ALUMNO_TUTORES;
INSERT INTO ALUMNO_TUTORES VALUES (1,1,2);
INSERT INTO ALUMNO_TUTORES VALUES (2,2,1);
INSERT INTO ALUMNO_TUTORES VALUES (3,3,4);
INSERT INTO ALUMNO_TUTORES VALUES (4,5,3);


SELECT*FROM ALUMNO;
SELECT*FROM TUTORES;

COMMIT;

--EMPLEAR SECIENCIAS
--CREAR SECUENCIAS
--Se emplean para generar valores de numeros enteros
--pueden ser consecutivos
--o con un incremento que nosotros indiquemos
--Se utiliza para generar automáticamente una secuencia en los valores
--de las llaves primarias
--y así asegurarnos de que los valores no se repiten

--CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES
CREATE SEQUENCE ALUMNO_SEQ --CREAAMOS LA SECUENCIA Y SU NOMBRE
START WITH 5-- INDICAMOS EL VALOR EN EL QUE INICIA LA SECUENCIA
INCREMENT BY 1--INCREMENTAMOS EL VALOR DE LA SECUENCIA COMO SE LE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MAXIMO DE LA SECUENCIA 
MINVALUE 1 --INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
CYCLE; --INDICAMOS SI LA SECUENCIA SE REPITE O NO  (NOCYCLE)

--TRIGGER (DISPARADOR)
--Ejecutar o desencadenar una acción

CREATE TRIGGER INSERT_ALUMNO --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN --DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_SEQ.NEXTVAL INTO: NEW.IDALUMNO FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;


--ELIMINAR UN TRIGGER
DROP TRIGGER INSERT_ALUMNO; --SOLO EJECUTAR SI ES NECESARIO

DESCRIBE ALUMNO; 

INSERT INTO ALUMNO VALUES
(1,'GERARDO','14/03/1990','MASCULINO','8O SEMESTRE',1);

SELECT*FROM ALUMNO;

DESCRIBE ALUMNO_TUTORES;
DROP TABLE ALUMNO_TUTORES
--CREAR UNA SECUENCIA DE VALORES POR DEFAULT 
CREATE SEQUENCE ALUMNO_TUTORES_SEQ;

CREATE TRIGGER INSERT_ALUMNO_TUTORES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO_TUTORES FOR EACH ROW BEGIN  --DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_TUTORES_SEQ.NEXTVAL INTO: NEW.ID_AT FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

DROP TRIGGER INSERT_ALUMNO_TUTORES;
SELECT*FROM ALUMNO_TUTORES;
--INSERTANDO VALORES INDICANDO SOLO LAS COLUMNAS EN LAS QUE
--VAMOS A INSERTAR DATOS 
INSERT INTO ALUMNO_TUTORES (ID_ALUMNO,ID_TUTOR) VALUES(1,2);
INSERT INTO ALUMNO_TUTORES (ID_ALUMNO,ID_TUTOR) VALUES(2,3);


SELECT * FROM ALUMNO;

--OTRA FORMA DE INSERCIÓN "MASIVA"

INSERT ALL
INTO ALUMNO (NOMBRE, FECHA DE NAC, SEXO, SEMESTRE,STATUS) 
VALUES('GABRIELA','14/03/1990','FEMENINO','8O SEMESTRE',1);
INTO ALUMNO (NOMBRE, FECHA DE NAC, SEXO, SEMESTRE,STATUS) 
VALUES('ITZEL','14/03/1990','FEMENINO','8O SEMESTRE',1);
INTO ALUMNO (NOMBRE, FECHA DE NAC, SEXO, SEMESTRE,STATUS) 
VALUES('MARIO','14/03/1990','MASCULINO','8O SEMESTRE',1);
INTO ALUMNO (NOMBRE, FECHA DE NAC, SEXO, SEMESTRE,STATUS) 
VALUES('ANDRES','14/03/1990','MASCULINO','8O SEMESTRE',1);
SELECT * FROM DUAL;


SELECT * FROM ALUMNO;


--------------------------------------------------------
--EJERCICIO DE LA AEROLINEA
--CREANDO ENTIDADES FUERTES

CREATE TABLE BASES (
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2(20)
);

CREATE SEQUENCE BASES_SEQ;
--CREAMOS EL DISPARADOR PARA LA TABLA BASES
CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN 
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;
DROP TRIGGER INSERT_BASES;

--CREAMOS LA ENTIDAD DE CLIENTES
CREATE TABLE CLIENTES_VUELO(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
EMAIL NVARCHAR2(30)
);


CREATE SEQUENCE CLIENTES_SEQ;

CREATE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES_VUELO FOR EACH ROW BEGIN 
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;


--CREANDO ENTIDADES DEBILES
CREATE TABLE PILOTOS (
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVUELO NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES(ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (1))
);

DROP TABLE PILOTOS;

CREATE SEQUENCE PILOTOS_SEQ;


CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;
----------------------
CREATE TABLE TRIPULACION (
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER, 
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN(1))
);



CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;
--------
CREATE TABLE AVIONES (
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE AVIONES_SEQ;
CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;


-----------------
---CREAMOS TABLA VUELOS 
CREATE TABLE VUELOS (
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORAFECHA DATE,
ID_PILOTO NUMBER,
ID_AVION NUMBER,
CONSTRAINT FK_IDPILOTO_VUELOS
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS(ID_PILOTO),
CONSTRAINT FK_IDAVION_VUELOS
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES(ID_AVION)
);

CREATE SEQUENCE VUELOS_SEQ;


CREATE TRIGGER INSERT_VUELOS
BEFORE INSERT ON VUELOS FOR EACH ROW BEGIN
SELECT VUELOS_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;


-------
CREATE TABLE TRIPULACION_VUELO (
ID_TV NUMBER PRIMARY KEY,
ID_TRIPULACION NUMBER,
ID_VUELO NUMBER,
CONSTRAINT FK_IDTRIPULACION_TV
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION(ID_TRIPULACION),
CONSTRAINT FK_IDVUELO_TV
FOREIGN KEY (ID_VUELO)
REFERENCES VUELOS(ID_VUELO)
);

CREATE SEQUENCE TV_SEQ;

CREATE TRIGGER INSERT_TV
BEFORE INSERT ON TRIPULACION_VUELO FOR EACH ROW BEGIN
SELECT TV_SEQ.NEXTVAL INTO:NEW.ID_TV FROM DUAL;
END;
--------------------


CREATE TABLE BOLETOS (
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (8,2),
CONSTRAINT FK_IDVUELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELOS(ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES CLIENTES_VUELO (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

------------------------

--INSERCIONES DE REGISTROS, COMENZANDO POR LAS ENTIDADES FUERTES

INSERT INTO BASES (ID_BASE,TIPO) VALUES (1,'DESCANSO');
INSERT INTO BASES (ID_BASE, TIPO) VALUES (2,'MANTENIMIENTO');

SELECT * FROM BASES;



--INSERCION DE REGISTROS DE CLIENTES 
DESCIRBE CLIENTES_VUELO;
INSERT ALL 
INTO CLIENTES_VUELO (NOMBRE, DIRECCION,TELEFONO,EMAIL)VALUES 
('MARIO','ZACATECAS','5567900123','mario@gmail.com')
INTO CLIENTES_VUELO (NOMBRE, DIRECCION,TELEFONO,EMAIL)VALUES 
('JOSE ZAHID','EDOMEX','5567900135','josez@gmail.com')
INTO CLIENTES_VUELO (NOMBRE, DIRECCION,TELEFONO,EMAIL)VALUES 
('GABRIELA','VERACRUZ','2287907654','gaby@gmail.com')
INTO CLIENTES_VUELO (NOMBRE, DIRECCION,TELEFONO,EMAIL)VALUES 
('AARON','PUEBLA','2227907654','aaron@gmail.com')
INTO CLIENTES_VUELO (NOMBRE, DIRECCION,TELEFONO,EMAIL)VALUES 
('LUIS','MICHOACAN','4467907654','luis@gmail.com')
SELECT * FROM DUAL;

SELECT * FROM CLIENTES_VUELO;


-----------INSERCION DE DATOS PILOTOS
DESCRIBE PILOTOS;
INSERT ALL INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES
('SAUL',1200,1)
INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES
('CESAR',700,1)
INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES
('CAROL',450,1)
INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES
('JUAN',1400,1)
INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES
('GERARDO',300,1)
SELECT * FROM DUAL;

INSERT INTO PILOTOS (NOMBRE, HORASVUELO, ID_BASE) VALUES ('EVANGELINO',900,1);
SELECT * FROM PILOTOS;

--ACTUALIZAR UN REGISTRO INDIVIDUAL
UPDATE PILOTOS SET NOMBRE = 'ALBERTO' WHERE ID_PILOTO=7;
UPDATE PILOTOS SET HORASVUELO= 1500 WHERE ID_PILOTO=7;

--INSERCION DE DATOS EN LA TABLA DE TRIPULACION

DESCRIBE TRIPULACION;
INSERT ALL 
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('EDUARDO',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('CAROLINA',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('STEPHANY',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('JUAN',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('ANDRES',1)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

--INSERCION DE REGISTROS DE AVIONES
DESCRIBE AVIONES;
INSERT ALL 
INTO AVIONES (MODELO, ID_BASE) VALUES ('BOEING-1900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES ('AIRBUS-900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES ('BOEING-3900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES ('BOEING-2900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES ('PELICAN-2300',2)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;

--CONFIRMAMOS CAMBIOS EN LOS REGISTROS
COMMIT;

--INSERCION DE REGISTROS EN VUELOS
DESCRIBE VUELOS;
INSERT ALL
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) 
VALUES ('VIENNA','TOKYO',TO_DATE('2/03/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,2)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) 
VALUES  ('PARIS','EGIPTO',TO_DATE('3/03/2023 17:30:00','DD-MM-YYYY HH24:MI:SS'),2,3)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) 
VALUES  ('TIJUANA','ACAPULCO',TO_DATE('4/03/2023 12:00:00','DD-MM-YYYY HH24:MI:SS'),4,1)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) 
VALUES  ('CDMX','MOSCU',TO_DATE('5/03/2023 18:15:00','DD-MM-YYYY HH24:MI:SS'),3,5)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) 
VALUES  ('BERLIN','ROMA',TO_DATE('6/03/2023 15:50:00','DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

SELECT * FROM VUELOS;

COMMIT;
--INSERCION DE REGISTROS DE TRIPULACION_VUELO

DESCRIBE TRIPULACION_VUELO;
INSERT ALL 
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (1,5)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (2,3)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (3,1)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (4,4)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (5,2)
SELECT * FROM DUAL;


SELECT * FROM TRIPULACION_VUELO;

--INSERCION DE REGISTROS DE BOLETOS

INSERT ALL 
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(1,2,25000.00)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(3,4,5000.00)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(5,1,35000.00)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(2,5,50000.00)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(4,3,125000.00)
SELECT * FROM DUAL;

SELECT * FROM BOLETOS;

UPDATE BOLETOS SET COSTO = 80000.88 WHERE ID_BOLETO=5;

---BORRAR UNA RESTRICCION DE LLAVE FORANEA FOREIGN KEY 
ALTER TABLE TABLA
DROP CONSTRAINT NOMBRERESTRICCION;

SELECT * FROM BOLETOS;

commit;

INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('MANUEL',1);
SELECT* FROM TRIPULACION;
COMMIT;
--REVERTIR LA INSERCION DE DATOS, ACTUALIZACIÓN O BORRADO DE DATOS
--NOS LLEVA AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;



DELETE FROM TRIPULACION WHERE ID_TRIPULACION=13;

--BORRAR UN REGISTRO HACIENDOLO COINCIDIR CON OTRO CAMBIO
DELETE FROM TRIPULACION WHERE NOMBRE='MANUEL';
--CONSULTA DE TODOS LOS DATOS DE UNA TABLA

--SELECT * FROM NOMBREDELATABLA;

SELECT * FROM PILOTOS;


--REALIZAR UNA CONSULTA CON COLUMNAS ESPECIFICAS DE UNA TABLA 
SELECT NOMBRE, ID_PILOTO FROM PILOTOS;
--RELACIONAR DATOS CON UNA DETERMINADA CONDICIÓN
SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO<700;

--CONSULTAR DATOS CON MÁS DE UNA CONDICIÓN CONCATENANDOLO CON "AND"
SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO<700 AND NOMBRE='GERARDO';


--CONSULTAR DATOS PARA BUSCAR RANGOS MEDIANTE "BETWEEN"
SELECT * FROM PILOTOS WHERE HORASVUELO BETWEEN 400 AND 1200;

--CONSULTANDO VALORES SIMILARES(NOMBRE)
SELECT* FROM PILOTOS WHERE NOMBRE LIKE 'C%';

--FUNCIONES DE AGREGACION
SELECT MAX(HORASVUELO) FROM PILOTOS;
SELECT MIN(HORASVUELO) FROM PILOTOS;

--BUSCAR AL PILOTO CON MÁS HORAS DE VUELO
SELECT * FROM PILOTOS WHERE HORASVUELO=(SELECT MAX (HORASVUELO) FROM PILOTOS);
COMMIT;

---ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVUELO=NULL;--ACTUALIZAR LOS VALORES A NULOS

SELECT* FROM PILOTOS;
ROLLBACK; -- REGRESA AL ULTIMO ESTADO DEL COMMIT


--REALIZAR UN CONTEO DE LAS FILAS O REGISTROS PARA DETERMINADOS DATOS
--NOS RETORNA EL VALOR DE CUANTOS REGISTROS CUMPLEN CON UNA DETERMINADA CONDICIÓN

SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVUELO>700;

--OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA 
SELECT AVG (HORASVUELO) FROM PILOTOS;

--SUMATORIA DE LOS VALORES DE UNA COLUMNA
SELECT SUM(HORASVUELO) FROM PILOTOS;

--FUNCIONES GROUP BY
--MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;

SELECT*FROM ALUMNO;

--ORDENAR REGISTROS PARA MOSTRARLOS EN ORDEN DESCENDENTE 
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

--ORDENAR REGISTROS PARA MOSTRARLOS EN ORDEN ASCENDETE
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

--buscar los DATOS DE LA TRIPULACIÓN QUE ESTUVO CON DETERMINADO CLIENTE
--EN UN VUELO Y DONDE EL NOMBRE DEL CLIENTE HAYA SIDO = 'NOMBRE'
SELECT * FROM CLIENTES_VUELO;
SELECT * FROM BOLETOS;
SELECT * FROM TRIPULACION_VUELO;

SELECT * FROM TRIPULACION WHERE ID_TRIPULACION=(
SELECT ID_TRIPULACION FROM TRIPULACION_VUELO WHERE ID_VUELO=(
SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE=(
SELECT ID_CLIENTE FROM CLIENTES_VUELO WHERE NOMBRE='AARON'))); --IDENTIFICAR AL CLIENTE 


---CONSULTAS CON JOINS
--INNER JOIN
--SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA
--LA COINCIDENCIA DE AMBAS SE MUESTRA JUSTO EN EL MEDIO
--TODO ESTO SE LOGRA GRACIAS AL USO DE VALORES COMPARTIDOS
--MEDIANTE PRIMARY KEYS Y FOREIGN KEYS


--FORMA EXPLICITA
--INDICAMOS EL USO DE INNER JOIN O JOIN

SELECT * FROM PILOTOS--SELECCIONAR UNA TABLA 'A'
INNER JOIN BASES--INDICAMOS LA UNION CON UNA TABLA 'B' MEDIANTE INNER JOIN
ON PILOTOS.ID_BASE=BASES.ID_BASE;
--INDICAMOS EN DONDE SE UNEN (DATO EN COMÚN) CON EL NOMBRE DE LA TABLA Y SU
--COLUMNA 

SELECT * FROM PILOTOS
JOIN BASES
ON PILOTOS.ID_BASE = BASES.ID_BASE;


--PODEMOS CREAR ALIAS DE LAS TABLAS PARA EVITAR ESCRIBIR EL NOMBRE COMPLETO DDE LA MISMA

SELECT * FROM PILOTOS P
INNER JOIN BASES B
ON P.ID_BASE=B.ID_BASE;


--FORMA IMPLICITA 
--OMITIMOS LA INSTRUCCION INNER JOIN Y ON Y SE SUSTITUYE POR WHERE
SELECT * FROM PILOTOS, BASES 
WHERE PILOTOS.ID_BASE=BASES.ID_BASE;

--LEFT JOIN
--SE MUESTRAN O PRIORIZAN LOS DATOS O ELEMENTOS DE LA PRIMERA TABLA 


SELECT * FROM PILOTOS
LEFT JOIN BASES
ON PILOTOS.ID_BASE=BASES.ID_BASE;

---CON JOIN 
SELECT * FROM TRIPULACION T
INNER JOIN TRIPULACION_VUELO TV
ON T.ID_TRIPULACION=TV.ID_TRIPULACION
INNER JOIN BOLETOS B
ON B.ID_VUELO=TV.ID_VUELO
INNER JOIN CLIENTES_VUELO CV
ON CV.ID_CLIENTE=B.ID_CLIENTE
WHERE NOMBRE='AARON';


--------------
---BUSCAR EL ID DEL AVION, MODELO, DESTINO,  DEL PILOTO CON MÁS HORAS DE VUELO
--RESOLVER CON JOINS
SELECT A.ID_AVION, A.MODELO, V.DESTINO FROM AVIONES A
INNER JOIN VUELOS V
ON A.ID_AVION=V.ID_AVION
INNER JOIN PILOTOS P 
ON P.ID_PILOTO=V.ID_PILOTO
WHERE HORASVUELO=(SELECT MIN(HORASVUELO) FROM PILOTOS);
--ORDER BY HORASVUELO DESC




--SELECT AVIONES.ID_AVION, AVIONES.MODELO, VUELOS.DESTINO FROM PILOTOS
SELECT*FROM PILOTOS--PODEMOS PROBAR SI LAS TABLAS PUEDEN UNIRSE Y EJECUTAR 
INNER JOIN VUELOS --LA CONSULTA ANTES DE CONDICIONARLA
ON VUELOS.ID_PILOTO=PILOTOS.ID_PILOTO--VERIFICO SI FUNCIONA LA UNION DE AMBAS TABLAS
INNER JOIN AVIONES --SI FUNCIONA, AÑADO LA SIGUIENTE TABLA PARA UNIRLA CON LA ANTERIOR
ON AVIONES.ID_AVION=VUELOS.ID_AVION--Y PUEDO VOLVER A PROBAR SI FUNCIONA LA CONSULTA
WHERE PILOTOS.HORASVUELO=(SELECT MIN(HORASVUELO)FROM PILOTOS); --Y TERMINO CON UNA
--CONDICION EN CASO DE EXISTIR 





