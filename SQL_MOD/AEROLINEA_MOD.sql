--EJERCICIO AEROLINEA
--------------------------------------------------------------------------------
--CREANDO ENTIDADES FUERTES

--CREAMOS TABLA BASES-----------------------------------------------------------
CREATE TABLE BASES(
    ID_BASE NUMBER PRIMARY KEY,
    TIPO NVARCHAR2(20)
);


CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES
    BEFORE INSERT ON BASES FOR EACH ROW BEGIN
    SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

--CREAMOS CLIENTES_VUELO--------------------------------------------------------
CREATE TABLE CLIENTES_VUELO(
    ID_CLIENTE NUMBER PRIMARY KEY,
    NOMBRE NVARCHAR2(30),
    DIRECCION NVARCHAR2(30),
    TELEFONO NVARCHAR2(10),
    EMAIL NVARCHAR2(30)
);

CREATE SEQUENCE CLIENTES_VUELO_SEQ;

CREATE TRIGGER INSERT_CLIENTES_VUELO
    BEFORE INSERT ON CLIENTES_VUELO FOR EACH ROW BEGIN
    SELECT CLIENTES_VUELO_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

--CREANDO ENTIDADES DEBILES-----------------------------------------------------

--CREAMOS PILOTOS
CREATE TABLE PILOTOS(
    ID_PILOTO NUMBER PRIMARY KEY,
    NOMBRE NVARCHAR2(30),
    HORASVUELO NUMBER,
    ID_BASE NUMBER,
    CONSTRAINT FK_IDBASE_PILOTOS
        FOREIGN KEY (ID_BASE)
        REFERENCES BASES(ID_BASE),
    CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (1))
);


CREATE SEQUENCE PILOTOS_SEQ;
    
CREATE TRIGGER INSERT_PILOTOS
    BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
    SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;    

--CREAMOS TRIPULACION
CREATE TABLE TRIPULACION(
    ID_TRIPULACION NUMBER PRIMARY KEY,
    NOMBRE NVARCHAR2(30),
    ID_BASE NUMBER,
    CONSTRAINT FK_IDBASE_TRIPULACION
        FOREIGN KEY (ID_BASE)
        REFERENCES BASES(ID_BASE),
    CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE TRIPULACION_SEQ;
    
CREATE TRIGGER INSERT_TRIPULACION
    BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
    SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;
    
--CREAMOS TABLA AVIONES
CREATE TABLE AVIONES(
    ID_AVION NUMBER PRIMARY KEY,
    MODELO NVARCHAR2(30),
    ID_BASE NUMBER,
    CONSTRAINT FK_IDBASE_AVIONES
        FOREIGN KEY (ID_BASE)
        REFERENCES BASES(ID_BASE),
    CONSTRAINT CHECK_BASE_AVIONES CHECK(ID_BASE IN (2))
);

DROP SEQUENCE AVIONES_SEQ;
DROP TRIGGER INSERT_AVIONES;
CREATE SEQUENCE AVIONES_SEQ;
    
CREATE TRIGGER INSERT_AVIONES
    BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
    SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

--CREAMOS TABLA VUELOS--------
CREATE TABLE VUELOS(
    ID_VUELO NUMBER PRIMARY KEY,
    ORIGEN NVARCHAR2(30),
    DESTINO NVARCHAR2(30),
    HORAFECHA DATE,
    ID_PILOTO NUMBER,
    ID_AVION NUMBER,
    CONSTRAINT FK_IDPILOTO_VUELOS
        FOREIGN KEY (ID_PILOTO)
        REFERENCES PILOTOS(ID_PILOTO),
    CONSTRAINT FK_IDAVION_VUELOS
        FOREIGN KEY (ID_AVION)
        REFERENCES AVIONES(ID_AVION)
);

DROP SEQUENCE VUELOS_SEQ;
DROP TRIGGER INSERT_VUELOS;

CREATE SEQUENCE VUELOS_SEQ;
    
CREATE TRIGGER INSERT_VUELOS
    BEFORE INSERT ON VUELOS FOR EACH ROW BEGIN
    SELECT VUELOS_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

--CREAMOS TABLA TRIPULACION_VUELO
CREATE TABLE TRIPULACION_VUELO(
    ID_TV NUMBER PRIMARY KEY,
    ID_TRIPULACION NUMBER,
    ID_VUELO NUMBER,
    CONSTRAINT FK_IDTRIPULACION_VUELO
        FOREIGN KEY (ID_TRIPULACION)
        REFERENCES TRIPULACION(ID_TRIPULACION),
    CONSTRAINT FK_IDVUELO_VUELO
        FOREIGN KEY (ID_VUELO)
        REFERENCES VUELOS(ID_VUELO)
);

CREATE SEQUENCE TV_SEQ;
    
CREATE TRIGGER INSERT_TV
    BEFORE INSERT ON TRIPULACION_VUELO FOR EACH ROW BEGIN
    SELECT TV_SEQ.NEXTVAL INTO:NEW.ID_TV FROM DUAL;
END;

--CREAMOS TABLA BOLETOS--
CREATE TABLE BOLETOS(
    ID_BOLETO NUMBER PRIMARY KEY,
    ID_VUELO NUMBER,
    ID_CLIENTE NUMBER,
    COSTO NUMBER(8,2),
    CONSTRAINT FK_IDVUELO_BOLETOS
        FOREIGN KEY (ID_VUELO)
        REFERENCES VUELOS(ID_VUELO),
    CONSTRAINT FK_IDCLIENTE_BOLETOS
        FOREIGN KEY (ID_CLIENTE)
        REFERENCES CLIENTES_VUELO(ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;
    
CREATE TRIGGER INSERT_BOLETOS
    BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
    SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;
--------------------------------------------------------------------------------
--INSERSION DE REGISTROS EN BASES
INSERT INTO BASES(ID_BASE, TIPO)VALUES(1,'DESCANSO');
INSERT INTO BASES(ID_BASE, TIPO)VALUES(2,'MANTENIMIENTO');
SELECT * FROM BASES;

--INSERSION REGISTRON EN CLIENTES_VUELO
DESCRIBE CLIENTES_VUELO;

INSERT ALL
    INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL) 
        VALUES('MAEIO','ZACATECAS','3333333333','mario@gmail.com')
    INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL) 
        VALUES('JOSE ZAHID','EDOMEX','7223343333','jose@gmail.com')
    INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL) 
        VALUES('GABI','VERACRUZ','3333333666','gabi@gmail.com')
    INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL) 
        VALUES('AARON','PUEBLA','2222222222','aaron@gmail.com')
    INTO CLIENTES_VUELO(NOMBRE,DIRECCION,TELEFONO,EMAIL) 
        VALUES('LUIS','MICHOACAN','4433333333','luis@gmail.com')
SELECT * FROM DUAL;

SELECT * FROM CLIENTES_VUELO;

--INSERSION DE REGISTROS EN PILOTOS
INSERT ALL
    INTO PILOTOS(NOMBRE,HORASVUELO,ID_BASE) 
        VALUES('GERARDO',1200,1)
    INTO PILOTOS(NOMBRE,HORASVUELO,ID_BASE) 
        VALUES('CESAR',700,1)
    INTO PILOTOS(NOMBRE,HORASVUELO,ID_BASE) 
        VALUES('PEDRO',450,1)
    INTO PILOTOS(NOMBRE,HORASVUELO,ID_BASE) 
        VALUES('JUAN',1200,1)
    INTO PILOTOS(NOMBRE,HORASVUELO,ID_BASE) 
        VALUES('GUSTAVO',300,1)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;

--ACTUALIZAR UN REGISTRO INDIVIDUAL
UPDATE PILOTOS SET NOMBRE = 'ALBERTO' WHERE ID_PILOTO=5;
UPDATE PILOTOS SET HORASVUELO = 350 WHERE ID_PILOTO=5;

--INSERSION DE REGISTROS EN TRIPULACION
INSERT ALL
    INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('EDUARDO', 1)
    INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('CAROLINA', 1)
    INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('STEPHANY', 1)
    INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('JUAN', 1)
    INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('ANDRES', 1)
SELECT * FROM DUAL;
SELECT * FROM TRIPULACION;

INSERT ALL
    INTO AVIONES(MODELO,ID_BASE) VALUES('BOEING-1900', 2)
    INTO AVIONES(MODELO,ID_BASE) VALUES('AIRBUS-900', 2)
    INTO AVIONES(MODELO,ID_BASE) VALUES('BOEING-3900', 2)
    INTO AVIONES(MODELO,ID_BASE) VALUES('BOEING-2900', 2)
    INTO AVIONES(MODELO,ID_BASE) VALUES('PELICAN-2300', 2)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;
---------
INSERT ALL
    INTO VUELOS (ORIGEN, DESTINO, HORAFECHA,ID_PILOTO,ID_AVION)VALUES('VIENA','TOKYO', TO_DATE('02/03/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,2)
    INTO VUELOS (ORIGEN, DESTINO, HORAFECHA,ID_PILOTO,ID_AVION)VALUES('PARIS','EGIPTO', TO_DATE('03/03/2023 17:30:00','DD-MM-YYYY HH24:MI:SS'),2,3)
    INTO VUELOS (ORIGEN, DESTINO, HORAFECHA,ID_PILOTO,ID_AVION)VALUES('TIJUANA','ACAPULCO', TO_DATE('04/03/2023 12:30:00','DD-MM-YYYY HH24:MI:SS'),4,1)
    INTO VUELOS (ORIGEN, DESTINO, HORAFECHA,ID_PILOTO,ID_AVION)VALUES('CDMX','MOSCU', TO_DATE('05/03/2023 18:30:00','DD-MM-YYYY HH24:MI:SS'),3,5)
    INTO VUELOS (ORIGEN, DESTINO, HORAFECHA,ID_PILOTO,ID_AVION)VALUES('BERLIN','ROMA', TO_DATE('06/03/2023 15:30:00','DD-MM-YYYY HH24:MI:SS'),5,5)
SELECT * FROM DUAL;

SELECT * FROM VUELOS;

INSERT ALL
    INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO) VALUES(1, 5)
    INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO) VALUES(2, 3)
    INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO) VALUES(3, 1)
    INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO) VALUES(4, 4)
    INTO TRIPULACION_VUELO(ID_TRIPULACION,ID_VUELO) VALUES(5, 2)
SELECT * FROM DUAL;
SELECT* FROM TRIPULACION_VUELO;

INSERT ALL
    INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO) VALUES(1,2,25000)
    INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO) VALUES(3,4,5000)
    INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO) VALUES(5,1,35000)
    INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO) VALUES(2,5,50000)
    INTO BOLETOS(ID_VUELO,ID_CLIENTE,COSTO) VALUES(4,3,80000)
SELECT * FROM DUAL;
SELECT* FROM BOLETOS;

/*ELIMINAR UNA RESTRICCION
alter table TABLA drop constraint NOMBRERESTRICCION;
*/

COMMIT;

INSERT INTO TRIPULACION(NOMBRE,ID_BASE) VALUES('MANUEL', 1);

--BORRAR UN REGISTRO QUE COINCIDA CON ID
DELETE FROM TRIPULACION WHERE ID_TRIPULACION=6;

DELETE FROM TRIPULACION WHERE NOMBRE='MANUEL';
--PERMITE REVERTIR LA INSERCION DE DATOS
--NOS LLEVA AL ESTADO DEL ULTIMO COMMIT A NIVEL DE REGISTROS
ROLLBACK;

--CONSULTA DE TODOS LOS DATOS
SELECT * FROM NOMBRE_TABLA;

--REALIZAR UNA CONSULTA CON COLUMNAS ESPECIFICAS DE UNA TABLA
--LOS DATOS SE MUESTRAN EN EL ORDEN QUE SE SOLICITA EN EL SCRIPT
SELECT NOMBRE, ID_PILOTO FROM PILOTOS;

--CONSULTAR DATOS CON UNA DETERMINADA CONDICION
SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO < 700;

--CONSULTAR DATOS CON UNA CON MAS DE UNA COMBINACION CONCATENANDO CON 'AND'
SELECT NOMBRE,HORASVUELO FROM PILOTOS WHERE HORASVUELO<700 AND NOMBRE='GUSTAVO';

--CONSULTAR DATOS EN UN RANGO MEDIANTE BETWEEN
SELECT * FROM PILOTOS WHERE HORASVUELO BETWEEN 400 AND 1200;

--CONSULTANDO VALORES SIMILARES EN EL NOMBRE
--QUE EMPIECEN CON P
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';
--QUE TERMINEN CON O
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';

--FUNCIONES DE AGREGCION 
SELECT MAX (HORASVUELO) FROM PILOTOS;
SELECT MIN (HORASVUELO) FROM PILOTOS;

--BUSCAR AL PILOTO CON MAS HORAS DE VUELO
SELECT * FROM PILOTOS WHERE HORASVUELO=(SELECT MAX(HORASVUELO) FROM PILOTOS);
COMMIT;

--ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVUELO=NULL;
SELECT * FROM PILOTOS;--CONSULTAMOS LOS CAMBIOS

ROLLBACK;

--REALIZAR UN CONTEO DE REGISTROS CON DETERMINADOS DATOS O CONDICION
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVUELO>700;

--OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG(HORASVUELO) FROM PILOTOS;

--TOTAL HORAS VUELO SUMATORIA
SELECT SUM(HORASVUELO) FROM PILOTOS;

--GROUP BY POR GENERO ALUMNOS
SELECT COUNT(SEXO), SEXO FROM ALUMNOS GROUP BY SEXO;
SELECT * FROM ALUMNOS;

--ORDENAR REGISTROS PARA MOSTRARLOS EN ORDEN DESCENDENTE
SELECT * FROM ALUMNOS ORDER BY NOMBRE DESC;
--ASCENDENTE
SELECT * FROM ALUMNOS ORDER BY NOMBRE ASC;

COMMIT;

--CREAR LAS SIGUIENTES CONSULTAS------------------------------------------------
--BUSCAR LOS DATOS DE LA TRIPULACION QUE ESTUVO CON DETERMINADO CLIENTE
--EN UN VUELO Y DONDE EL NOMBRE DEL CLIENTE HAYA SIDO = 'NOMBRE'

SELECT * FROM TRIPULACION 
    WHERE ID_TRIPULACION=( SELECT ID_TRIPULACION FROM TRIPULACION_VUELO 
        WHERE ID_VUELO = (SELECT ID_VUELO FROM BOLETOS 
            WHERE ID_CLIENTE =(SELECT ID_CLIENTE FROM CLIENTES_VUELO  
                WHERE NOMBRE='AARON')));
                
--CONSULTAS MEDIANTE JOINS------------------------------------------------------

--INNER JOIN
--SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TBLA A CON UNA TABLA B
--MUESTRA LOS RE3GISTROS DE AMBAS TABLAS CON EL CAMPO QUE LOS UNE
--GENERALMENTE ES MEDIANTE PK Y FK
--SINTAXIS-EXPLICITA
--INDICAMOS EL USO DE INNER JOIN O JOIN 
SELECT * FROM PILOTOS --INDICAR TABLA A
    INNER JOIN BASES --INDICAMOS LA UNION CON UNA TABLA B
    ON PILOTOS.ID_BASE = BASES.ID_BASE; --INDICAMOS EN DONDE SE UNEN O COINCIDEN AMBAS TABLAS

--TAMBIEN PODEMOS OCUPAR SOLO JOIN
SELECT * FROM PILOTOS 
    JOIN BASES 
    ON PILOTOS.ID_BASE = BASES.ID_BASE;
    
--PODEMOS CREAR ALIAS EN LAS TABLAS PARA EVITAR ESCRIBIR EL NOMBRE COMPLETO DE LAS MISMAS
SELECT * FROM PILOTOS P 
    INNER JOIN BASES B
    ON P.ID_BASE = B.ID_BASE;

--FORMA IMPLICITA
--SE OMITE LA SENTENCIA 'INNER JOIN - ON' Y SE SUSTITUYE CON 'WHERE'
SELECT * FROM PILOTOS, BASES 
    WHERE PILOTOS.ID_BASE = BASES.ID_BASE;

--LEFT JOIN
--SE PRIORIZAN LOS DATOS O ELEMENTOS DE LA PRIMERA TABLA Y SE MUESTRAN LOS COINCIDENTES CON LA SEGUNDA TABLA
SELECT * FROM PILOTOS
    LEFT JOIN BASES
    ON PILOTOS.ID_BASE=BASES.ID_BASE;
    
SELECT * FROM BASES
    LEFT JOIN PILOTOS
    ON PILOTOS.ID_BASE=BASES.ID_BASE;


--RIGTH JOIN
SELECT * FROM BASES
    RIGHT JOIN PILOTOS
    ON PILOTOS.ID_BASE=BASES.ID_BASE;

SELECT * FROM PILOTOS
    FULL JOIN BASES
    ON PILOTOS.ID_BASE=BASES.ID_BASE;

--CREAR LAS SIGUIENTES CONSULTAS- CON JOIN-----------------------------------------------
--BUSCAR LOS DATOS DE LA TRIPULACION QUE ESTUVO CON DETERMINADO CLIENTE
--EN UN VUELO Y DONDE EL NOMBRE DEL CLIENTE HAYA SIDO = 'NOMBRE'

SELECT * FROM TRIPULACION 
    WHERE ID_TRIPULACION=( SELECT ID_TRIPULACION FROM TRIPULACION_VUELO 
        WHERE ID_VUELO = (SELECT ID_VUELO FROM BOLETOS 
            WHERE ID_CLIENTE =(SELECT ID_CLIENTE FROM CLIENTES_VUELO  
                WHERE NOMBRE='AARON')));

SELECT T.ID_TRIPULACION, T.NOMBRE,T.ID_BASE FROM TRIPULACION T
    INNER JOIN TRIPULACION_VUELO TV
    ON T.ID_TRIPULACION=TV.ID_TRIPULACION
    INNER JOIN BOLETOS B
    ON TV.ID_VUELO=B.ID_VUELO
    INNER JOIN CLIENTES_VUELO CV
    ON B.ID_CLIENTE=CV.ID_CLIENTE WHERE NOMBRE='GABI';
    
--BUSCAR EL ID DEL AVION, MODELO, DESTINO_VUELO, PILOTO CON MAS HORAS DE VUELO CON JOINS

SELECT A.ID_AVION, A.MODELO, V.DESTINO, P.NOMBRE AS NOMBRE_PILOTO, P.HORASVUELO FROM AVIONES A
    JOIN VUELOS V
    ON A.ID_AVION=V.ID_AVION
    JOIN PILOTOS P
    ON V.ID_PILOTO=P.ID_PILOTO WHERE HORASVUELO=(SELECT MAX(HORASVUELO) FROM PILOTOS);

COMMIT;



