-----------------------------------------------------------------------------------
--EJERCICIO AEROLINEA
----------------------------------------------------------------------------------


--ENTIDADES FUERTES----------------------------------------------

-----BASE------------
CREATE TABLE BASES(
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2(20)
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;



-------CLIENTES------------------------------------------

CREATE TABLE CLIENTES_VUELO(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
EMAIL NVARCHAR2(30)
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE CLIENTES_SEQ;

CREATE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES_VUELO FOR EACH ROW BEGIN
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;




------------------------------------------------------------------
--ENTIDADES DEBILES-----------------------------------------------

-------PILOTOS---------
CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE  NVARCHAR2(30),
HORASVUELO NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES(ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN(1))
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;


------TRIPULACION-----------------
CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES(ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN(1))
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;



----------AVIONES-------------

CREATE TABLE AVIONES(
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES(ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN(2))
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE AVIONES_SEQ;

CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

------------------------------------------------------------DIA 2

---------VUELOS--------------------------
CREATE TABLE VUELOS(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORAFECHA DATE,
ID_PILOTO NUMBER,
ID_AVION NUMBER,
CONSTRAINT FK_IDPILOTO_VUELOS
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS(ID_PILOTO),
CONSTRAINT FK_IDAVION_VUELOS
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES(ID_AVION)
);


--SECUENCIA Y TRIGGER
CREATE SEQUENCE VUELOS_SEQ;

CREATE TRIGGER INSERT_VUELOS
BEFORE INSERT ON VUELOS FOR EACH ROW BEGIN
SELECT VUELOS_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;



--------TRIPULACION_VUELO-----------------------------

CREATE TABLE TRIPULACION_VUELO(
ID_TV NUMBER PRIMARY KEY,
ID_TRIPULACION NUMBER,
ID_VUELO NUMBER,
CONSTRAINT FK_IDTRIPULACION_TV
    FOREIGN KEY (ID_TRIPULACION)
    REFERENCES TRIPULACION(ID_TRIPULACION),
CONSTRAINT FK_IDVUELO_TV
    FOREIGN KEY (ID_VUELO)
    REFERENCES VUELOS(ID_VUELO)
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE TV_SEQ;

CREATE TRIGGER INSERT_TV
BEFORE INSERT ON TRIPULACION_VUELO FOR EACH ROW BEGIN
SELECT TV_SEQ.NEXTVAL INTO:NEW.ID_TV FROM DUAL;
END;

---------BOLETOS----------------------------------------
CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER(8,2),
CONSTRAINT FK_IDVUELO_BOLETOS
    FOREIGN KEY (ID_VUELO)
    REFERENCES VUELOS(ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
    FOREIGN KEY (ID_CLIENTE)
    REFERENCES CLIENTES_VUELO(ID_CLIENTE)
);

--SECUENCIA Y TRIGGER
CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;


--------------------------------------------------------------------------
----CAPTURA DE REGISTROS
-------------------------------------------------------------------------

------ENTIDADES FUERTES

---BASES--------
INSERT INTO BASES VALUES(1,'DESCANSO');
INSERT INTO BASES VALUES(2,'MANTENIMIENTO');
SELECT * FROM BASES;

-----CLIENTES_VUELO-------------------------
DESCRIBE CLIENTES_VUELO;

INSERT ALL
INTO CLIENTES_VUELO (NOMBRE,DIRECCION,TELEFONO,EMAIL) VALUES
('MARIO','ZACATECAS','5567986546','MARIO@GMAIL.COM')
INTO CLIENTES_VUELO (NOMBRE,DIRECCION,TELEFONO,EMAIL) VALUES
('JOSE ZAHID','EDOMEX','5567436745','JOSEZ@GMAIL.COM')
INTO CLIENTES_VUELO (NOMBRE,DIRECCION,TELEFONO,EMAIL) VALUES
('GABRIELA','VERACRUZ','556799876','GABY@GMAIL.COM')
INTO CLIENTES_VUELO (NOMBRE,DIRECCION,TELEFONO,EMAIL) VALUES
('AARON','PUEBLA','2267986546','AARON@GMAIL.COM')
INTO CLIENTES_VUELO (NOMBRE,DIRECCION,TELEFONO,EMAIL) VALUES
('LUIS','MICHOACAN','4476584368','LUIS@GMAIL.COM')
SELECT * FROM DUAL;

SELECT * FROM CLIENTES_VUELO;


-------PILOTOS
DESCRIBE PILOTOS;

INSERT ALL
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE) VALUES
('GERARDO',1200,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE) VALUES
('CESAR',700,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE) VALUES
('PEDRO',450,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE) VALUES
('JUAN',1400,1)
INTO PILOTOS (NOMBRE,HORASVUELO,ID_BASE) VALUES
('GUSTAVO',300,1)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;
--PARA ACTUALIZAR/MODIFICAR UN REGISTRO EN UN CAMPO 
UPDATE PILOTOS SET HORASVUELO = 500 WHERE ID_PILOTO=5;


---------TRIPULACION
DESCRIBE TRIPULACION;

INSERT ALL
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('EDUARDO',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('CAROLINA',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('STEPHANY',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('JUAN',1)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('ANDRES',1)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

--------AVIONES
DESCRIBE AVIONES;

INSERT ALL
INTO AVIONES (MODELO,ID_BASE) VALUES('BOEING-1900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES('AIRBUS-900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES('BOEING-3900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES('BOEING-2900',2)
INTO AVIONES (MODELO,ID_BASE) VALUES('PELICAN-2300',2)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;

COMMIT;

-------VUELOS
DESCRIBE VUELOS;

INSERT ALL
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) VALUES
('VIENNA','TOKIO',TO_DATE('02/03/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,2)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) VALUES
('PARIS','EGIPTO',TO_DATE('03/03/2023 17:30:00','DD-MM-YYYY HH24:MI:SS'),2,3)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) VALUES
('TIJUANA','ACAPULCO',TO_DATE('04/03/2023 12:00:00','DD-MM-YYYY HH24:MI:SS'),4,1)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) VALUES
('CDMX','MOSCU',TO_DATE('05/03/2023 18:10:00','DD-MM-YYYY HH24:MI:SS'),3,5)
INTO VUELOS (ORIGEN, DESTINO, HORAFECHA, ID_PILOTO, ID_AVION) VALUES
('BERLIN','ROMA',TO_DATE('06/03/2023 15:50:00','DD-MM-YYYY HH24:MI:SS'),5,4)
SELECT * FROM DUAL;


SELECT * FROM VUELOS;
COMMIT;

-------- TRIPULACION_VUELOS

DESCRIBE TRIPULACION_VUELO;

INSERT ALL
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (1,5)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES (2,3)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES ( 3,1)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES ( 4,4)
INTO TRIPULACION_VUELO (ID_TRIPULACION, ID_VUELO) VALUES ( 5,2)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION_VUELO;

COMMIT;

--------BOLETOS

DESCRIBE BOLETOS;

INSERT ALL
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(1,2,25000)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(3,4,5000)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(5,1,35000)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(2,5,50000)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES(4,3,12000)
SELECT * FROM DUAL;

UPDATE BOLETOS SET COSTO = 80000.88 WHERE ID_BOLETO=5;

SELECT * FROM BOLETOS;



---HASTA AQUI LAS TABLAS YA CONTIENEN REGISTROS-------------


INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES('MANUEL',1);

SELECT * FROM TRIPULACION;

--REVERTIR LA INSERCION, ACTUALIZACION O BORRADO DE DATOS 
--Y NOS LLEVA AL ESTADO DEL ULTIMO COMMIT

ROLLBACK;


-------------------------------------------------------------
---------  CONSULTAS . --------------------------------------
--------------------------------------------------------------

--CONSULTA DE TODOS LOS DATOS

SELECT * FROM PILOTOS;

--CONSULTAS ESPECIFICAS DE COLUMNAS

SELECT NOMBRE, ID_PILOTO FROM PILOTOS;

--CONSULTAR DATOS CON DETERMINADA CONDICION

SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO>700
ORDER BY HORASVUELO;

--CONSULTAR DATOS CON MAS DE UNA CONDICION CONCATENANDOLO CON 'AND'

SELECT NOMBRE, HORASVUELO FROM PILOTOS WHERE HORASVUELO<700 AND NOMBRE='GUSTAVO';

--CONSULTAR DATOS PARA BUSCAR RANGOS MEDIANTE "BETWEEN"
SELECT * FROM PILOTOS WHERE HORASVUELO BETWEEN 400 AND 1200;


--CONSULTAR VALORES SIMILARES(NOMBRE)

SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';

--FUNCIONES DE AGREGACION
SELECT MAX(HORASVUELO) FROM PILOTOS;
SELECT MIN(HORASVUELO) FROM PILOTOS;

--PILOTO CON MAS HORAS DE VUELO

SELECT  * FROM PILOTOS WHERE HORASVUELO = (SELECT MAX(HORASVUELO) FROM PILOTOS);

COMMIT;

--ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVUELO=NULL;

SELECT * FROM PILOTOS;
ROLLBACK;


--REALIZAR UN CONTEO DE LOS REGISTROS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVUELO>700;

SELECT COUNT (ID_PILOTO) AS CANT FROM PILOTOS WHERE HORASVUELO>700;

--OBTENER PROMEDIO DE VALORES DE UNA COLUMNA
SELECT AVG(HORASVUELO) FROM PILOTOS;

--SUMATORIA DE VALORES DE UNA COLUMNA
SELECT SUM(HORASVUELO) FROM PILOTOS;


-- FUNCION GRUOP BY

SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;


SELECT * FROM ALUMNO;

--ORDNEAR REGISTROS 

SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

COMMIT;

----EJERCICIO
--REALIZAR CONSULTA
--BUSCAR LOS DATOS DE LA TRIPULACION QUE ESTUVO CON DETERMINADO CLIENTE EN UN VUELO
--Y DONDE EL NOMBRE DEL CLIENTE HAYA SIDO = NOMBRE


SELECT * FROM TRIPULACION WHERE ID_TRIPULACION=(
SELECT ID_TRIPULACION FROM TRIPULACION_VUELO WHERE ID_VUELO=
(SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE= 
(SELECT ID_CLIENTE FROM CLIENTES_VUELO WHERE NOMBRE= 'GABRIELA')));


--CONSULTAS CON JOINS

--INNER JOIN MUESTRA LOS REGISTROS QUE COINCIDEN DENTRO DE LAS TABLAS A Y B,
--ESTO SE LOGRA GRACIAS AL USO DE LAS PK Y FK
SELECT 
    C.NOMBRE AS CLIENTE,
    B.ID_VUELO AS VUELO
FROM CLIENTES_VUELO C
JOIN BOLETOS B
ON C.ID_CLIENTE = B.ID_CLIENTE;

--FORMA IMPLICITA
SELECT * FROM CLIENTES_VUELO, BOLETOS
WHERE CLIENTES_VUELO.ID_CLIENTE = BOLETOS.ID_CLIENTE;


--JOIN MULTIPLE

SELECT 
    C.NOMBRE AS CLIENTE,
    V.ID_VUELO,
    V.ORIGEN,
    V.DESTINO,
    V.HORAFECHA,
    B.COSTO
FROM BOLETOS B
INNER JOIN CLIENTES_VUELO C
ON C.ID_CLIENTE = B.ID_CLIENTE    
INNER JOIN VUELOS V   
ON B.ID_VUELO = V.ID_VUELO
WHERE C.NOMBRE = 'LUIS';


--LEFT JOIN
--REALIZA LA BUSQUEDA DE LOS ID DE LA TABLA IZQUIERDA SOBRE LA TABLA DERECHA
-- DE NO EXISTIR COINCIDENCIAS AUN ASI MUESTRA LOS ID Y LOS LLENA CON NULL
--DA PRIORIDAD A LA TABLA IZQUIERDA
SELECT *
FROM BASES B
LEFT JOIN PILOTOS P
ON B.ID_BASE = P.ID_BASE;

--RIGHT JOIN
--REALIZA LA BUSQUEDA DE LOS ID DE LA TABLA DERECHA SOBRE LA TABLA IZQUIERDA
-- DE NO EXISTIR COINCIDENCIAS AUN ASI MUESTRA LOS ID Y LOS LLENA CON NULL
--DA PRIORIDAD A LA TABLA DERECHA

SELECT *
FROM PILOTOS P
RIGHT JOIN BASES B
ON B.ID_BASE = P.ID_BASE;


--FULL JOIN
-- UNE LAS DOS TABLAS AUNQUE NO HAYA COINCIDENCIAS DEL LADO IZQUIERDO Y DERECHO
-- MUESTRA NULL DONDE NO HAYA COINCIDENCIAS

SELECT *
FROM BOLETOS B
FULL JOIN VUELOS V
ON V.ID_VUELO = B.ID_VUELO;

SELECT *
FROM PILOTOS P
FULL JOIN BASES B
ON B.ID_BASE = P.ID_BASE
FULL JOIN AVIONES A
ON A.ID_BASE = B.ID_BASE;

----EJERCICIO 2
--REALIZAR CONSULTA
--BUSCAR LOS DATOS DE LA TRIPULACION QUE ESTUVO CON DETERMINADO CLIENTE EN UN VUELO
--Y DONDE EL NOMBRE DEL CLIENTE HAYA SIDO = NOMBRE


SELECT 
    C.NOMBRE,
    V.ID_VUELO,
    V.ORIGEN,
    V.DESTINO,
    V.HORAFECHA,
    T.NOMBRE AS TRIPULACION
FROM TRIPULACION T
JOIN TRIPULACION_VUELO TV
ON T.ID_TRIPULACION=TV.ID_TRIPULACION
JOIN VUELOS V
ON V.ID_VUELO = TV.ID_VUELO
JOIN BOLETOS B
ON B.ID_VUELO=V.ID_VUELO
JOIN CLIENTES_VUELO C
ON C.ID_CLIENTE=B.ID_CLIENTE
WHERE C.NOMBRE = 'GABRIELA';

SELECT 
    T.ID_TRIPULACION,
    T.NOMBRE,
    T.ID_BASE
FROM TRIPULACION T
JOIN TRIPULACION_VUELO TV
ON T.ID_TRIPULACION=TV.ID_TRIPULACION
JOIN VUELOS V
ON V.ID_VUELO = TV.ID_VUELO
JOIN BOLETOS B
ON B.ID_VUELO=V.ID_VUELO
JOIN CLIENTES_VUELO C
ON C.ID_CLIENTE=B.ID_CLIENTE
WHERE C.NOMBRE = 'GABRIELA';

--EJERCICIO 3
--BUSCAR EL ID DEL AVION, MODELO, DESTINO DEL VUELO, DEL PILOTO CON MAS HORAS DE VUELO

SELECT
    P.ID_PILOTO,
    P.NOMBRE,
    P.HORASVUELO,
    A.ID_AVION,
    A.MODELO,
    V.DESTINO
FROM AVIONES A
JOIN VUELOS V
ON A.ID_AVION=V.ID_AVION
JOIN PILOTOS P
ON V.ID_PILOTO=P.ID_PILOTO
WHERE HORASVUELO =(SELECT MAX(HORASVUELO) FROM PILOTOS);








